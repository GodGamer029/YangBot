// automatically generated by the FlatBuffers compiler, do not modify

package yangbot.cpp;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FlatPhysicsPrediction extends Table {
    public static FlatPhysicsPrediction getRootAsFlatPhysicsPrediction(ByteBuffer _bb) {
        return getRootAsFlatPhysicsPrediction(_bb, new FlatPhysicsPrediction());
    }

    public static FlatPhysicsPrediction getRootAsFlatPhysicsPrediction(ByteBuffer _bb, FlatPhysicsPrediction obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createFlatPhysicsPrediction(FlatBufferBuilder builder,
                                                  int framesOffset,
                                                  int tickrate) {
        builder.startObject(2);
        FlatPhysicsPrediction.addTickrate(builder, tickrate);
        FlatPhysicsPrediction.addFrames(builder, framesOffset);
        return FlatPhysicsPrediction.endFlatPhysicsPrediction(builder);
    }

    public static void startFlatPhysicsPrediction(FlatBufferBuilder builder) {
        builder.startObject(2);
    }

    public static void addFrames(FlatBufferBuilder builder, int framesOffset) {
        builder.addOffset(0, framesOffset, 0);
    }

    public static int createFramesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startFramesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addTickrate(FlatBufferBuilder builder, int tickrate) {
        builder.addInt(1, tickrate, 0);
    }

    public static int endFlatPhysicsPrediction(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public FlatPhysicsPrediction __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public FlatPhysics frames(int j) {
        return frames(new FlatPhysics(), j);
    }

    public FlatPhysics frames(FlatPhysics obj, int j) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int framesLength() {
        int o = __offset(4);
        return o != 0 ? __vector_len(o) : 0;
    }

    public int tickrate() {
        int o = __offset(6);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }
}

