// This file controls gradle, which we are using to install and update the RLBot framework used by this example bot,
// and also compile and run the java code used by this bot.

apply plugin: 'java'
apply plugin: 'application'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    jcenter()
}

mainClassName = 'yangbot.MainClass'

// This directory will be created and the interface dll copied into it at runtime.
// The end result is that the interface dll will be available for loading.
def dllDirectory = 'build/dll'
applicationDefaultJvmArgs = ["-Djna.library.path=" + dllDirectory, "-Xms256m", "-Xmx1524m"]

dependencies {
    // Fetch the framework jar file
    compile('org.jetbrains:annotations:17.0.0')
    compile('org.rlbot.commons:framework:1.11.0')
    // for twitch stuff
    //compile('org.rlbot.twitch:ActionServer:1.+')
    //compile('org.rlbot.twitch:TwitchBrokerClient:1.+')
    //compile('org.knowm.xchart:xchart:3.6.1')
    testCompile('org.junit.jupiter:junit-jupiter:5.4.2')
    // This is makes it easy to find the dll when running in intellij, where JVM args don't get passed from gradle.
    runtime files(dllDirectory)
}

task checkPipUpgradeSafety {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def exitValue = exec {
                commandLine "python", "-c", "from rlbot.utils import public_utils; print(public_utils.is_safe_to_upgrade());"
                standardOutput = os
                ignoreExitValue = true
            }.exitValue

            // If the exit value is nonzero, the command  probably failed because rlbot is not installed at all.
            ext.isSafe = exitValue != 0 || os.toString().trim() == "True"
        }
    }
}


// Uses pip (the python package manager) to install all the python packages needed for this bot, as defined
// in requirements.txt.
task pipInstallRequirements {
    dependsOn 'checkPipUpgradeSafety'

    doLast {
        if (checkPipUpgradeSafety.isSafe) {
            exec {
                commandLine "python", "-m", "pip", "install", "-r", "requirements.txt", "--upgrade"
            }
        } else {
            println 'Skipping upgrade attempt because files are in use.'
        }
    }
}

task createDllDirectory {
    mkdir dllDirectory
}

// Installs or updates RLBot. Empty task for now. It still does stuff because it "dependsOn" tasks that do things.
task updateRLBot {
    dependsOn 'pipInstallRequirements'
    dependsOn 'createDllDirectory'
}
updateRLBot.dependsOn pipInstallRequirements

applicationDistribution.exclude(dllDirectory)

test {
    useJUnitPlatform()
}

run {
    if ( project.hasProperty("trainingbot") ){
        args "training";
    }else if ( project.hasProperty("testbot") ){
        args "test";
    }else if ( project.hasProperty("trainingtest") ){
        args "trainingtest";
    }
    enableAssertions(true)
}

// You can run gradew.bat distZip to generate a zip file suitable for tournament submissions.
// It will be generated in build/distributions
distZip {
    into ('python') {
        from fileTree('src/main/python') {
            exclude '__pycache__'
        }
    }
}

// This is the same as distZip, but not zipped. Handy for testing your tournament submission more rapidly.
installDist {
    into ('../python') {
        from fileTree('src/main/python') {
            exclude '__pycache__'
        }
    }
}
