// automatically generated by the FlatBuffers compiler, do not modify

package yangbot.cpp;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FlatPhysics extends Table {
    public static FlatPhysics getRootAsFlatPhysics(ByteBuffer _bb) {
        return getRootAsFlatPhysics(_bb, new FlatPhysics());
    }

    public static FlatPhysics getRootAsFlatPhysics(ByteBuffer _bb, FlatPhysics obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static void startFlatPhysics(FlatBufferBuilder builder) {
        builder.startObject(5);
    }

    public static void addPosition(FlatBufferBuilder builder, int positionOffset) {
        builder.addStruct(0, positionOffset, 0);
    }

    public static void addVelocity(FlatBufferBuilder builder, int velocityOffset) {
        builder.addStruct(1, velocityOffset, 0);
    }

    public static void addAngularVelocity(FlatBufferBuilder builder, int angularVelocityOffset) {
        builder.addStruct(2, angularVelocityOffset, 0);
    }

    public static void addEulerRotation(FlatBufferBuilder builder, int eulerRotationOffset) {
        builder.addStruct(3, eulerRotationOffset, 0);
    }

    public static void addElapsedSeconds(FlatBufferBuilder builder, float elapsedSeconds) {
        builder.addFloat(4, elapsedSeconds, 0.0f);
    }

    public static int endFlatPhysics(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public FlatPhysics __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public FlatVec3 position() {
        return position(new FlatVec3());
    }

    public FlatVec3 position(FlatVec3 obj) {
        int o = __offset(4);
        return o != 0 ? obj.__assign(o + bb_pos, bb) : null;
    }

    public FlatVec3 velocity() {
        return velocity(new FlatVec3());
    }

    public FlatVec3 velocity(FlatVec3 obj) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(o + bb_pos, bb) : null;
    }

    public FlatVec3 angularVelocity() {
        return angularVelocity(new FlatVec3());
    }

    public FlatVec3 angularVelocity(FlatVec3 obj) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(o + bb_pos, bb) : null;
    }

    public FlatVec3 eulerRotation() {
        return eulerRotation(new FlatVec3());
    }

    public FlatVec3 eulerRotation(FlatVec3 obj) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(o + bb_pos, bb) : null;
    }

    public float elapsedSeconds() {
        int o = __offset(12);
        return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f;
    }
}

