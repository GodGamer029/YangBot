// automatically generated by the FlatBuffers compiler, do not modify

package yangbot.cpp;

import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FlatCurve extends Table {
    public static FlatCurve getRootAsFlatCurve(ByteBuffer _bb) {
        return getRootAsFlatCurve(_bb, new FlatCurve());
    }

    public static FlatCurve getRootAsFlatCurve(ByteBuffer _bb, FlatCurve obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public static int createFlatCurve(FlatBufferBuilder builder,
                                      float length,
                                      int pointsOffset,
                                      int tangentsOffset,
                                      int distancesOffset,
                                      int curvaturesOffset) {
        builder.startObject(5);
        FlatCurve.addCurvatures(builder, curvaturesOffset);
        FlatCurve.addDistances(builder, distancesOffset);
        FlatCurve.addTangents(builder, tangentsOffset);
        FlatCurve.addPoints(builder, pointsOffset);
        FlatCurve.addLength(builder, length);
        return FlatCurve.endFlatCurve(builder);
    }

    public static void startFlatCurve(FlatBufferBuilder builder) {
        builder.startObject(5);
    }

    public static void addLength(FlatBufferBuilder builder, float length) {
        builder.addFloat(0, length, 0.0f);
    }

    public static void addPoints(FlatBufferBuilder builder, int pointsOffset) {
        builder.addOffset(1, pointsOffset, 0);
    }

    public static void startPointsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(12, numElems, 4);
    }

    public static void addTangents(FlatBufferBuilder builder, int tangentsOffset) {
        builder.addOffset(2, tangentsOffset, 0);
    }

    public static void startTangentsVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(12, numElems, 4);
    }

    public static void addDistances(FlatBufferBuilder builder, int distancesOffset) {
        builder.addOffset(3, distancesOffset, 0);
    }

    public static int createDistancesVector(FlatBufferBuilder builder, float[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]);
        return builder.endVector();
    }

    public static void startDistancesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static void addCurvatures(FlatBufferBuilder builder, int curvaturesOffset) {
        builder.addOffset(4, curvaturesOffset, 0);
    }

    public static int createCurvaturesVector(FlatBufferBuilder builder, float[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]);
        return builder.endVector();
    }

    public static void startCurvaturesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endFlatCurve(FlatBufferBuilder builder) {
        int o = builder.endObject();
        return o;
    }

    public static void finishFlatCurveBuffer(FlatBufferBuilder builder, int offset) {
        builder.finish(offset);
    }

    public static void finishSizePrefixedFlatCurveBuffer(FlatBufferBuilder builder, int offset) {
        builder.finishSizePrefixed(offset);
    }

    public void __init(int _i, ByteBuffer _bb) {
        bb_pos = _i;
        bb = _bb;
    }

    public FlatCurve __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public float length() {
        int o = __offset(4);
        return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f;
    }

    public FlatVec3 points(int j) {
        return points(new FlatVec3(), j);
    }

    public FlatVec3 points(FlatVec3 obj, int j) {
        int o = __offset(6);
        return o != 0 ? obj.__assign(__vector(o) + j * 12, bb) : null;
    }

    public int pointsLength() {
        int o = __offset(6);
        return o != 0 ? __vector_len(o) : 0;
    }

    public FlatVec3 tangents(int j) {
        return tangents(new FlatVec3(), j);
    }

    public FlatVec3 tangents(FlatVec3 obj, int j) {
        int o = __offset(8);
        return o != 0 ? obj.__assign(__vector(o) + j * 12, bb) : null;
    }

    public int tangentsLength() {
        int o = __offset(8);
        return o != 0 ? __vector_len(o) : 0;
    }

    public float distances(int j) {
        int o = __offset(10);
        return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0;
    }

    public int distancesLength() {
        int o = __offset(10);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer distancesAsByteBuffer() {
        return __vector_as_bytebuffer(10, 4);
    }

    public ByteBuffer distancesInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 10, 4);
    }

    public float curvatures(int j) {
        int o = __offset(12);
        return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0;
    }

    public int curvaturesLength() {
        int o = __offset(12);
        return o != 0 ? __vector_len(o) : 0;
    }

    public ByteBuffer curvaturesAsByteBuffer() {
        return __vector_as_bytebuffer(12, 4);
    }

    public ByteBuffer curvaturesInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 12, 4);
    }
}

